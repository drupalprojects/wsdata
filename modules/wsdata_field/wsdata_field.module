<?php

use Drupal\Core\Url;


/**
 * Implements hook_entity_operation().
 */
function wsdata_field_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  // Check if this field has the custom stroage flag set to true.
  if ('field_config' == $entity->getEntityTypeId()) {
    if ($entity->getFieldStorageDefinition()->hasCustomStorage()) {
      // Also need to check see if there is a wsfield_config associated to it.
      $wsfield_config = entity_load('wsfield_config', $entity->get('field_name'));
      if ($wsfield_config != NULL) {
        $operations = array();
        // Set the route paramters.
        $route_parameters = [
          'field_config' => $entity->get('id'),
          'node_type' => $entity->get('bundle'),
        ];

        // Create the link to edit the wsfield configurations.
        $operations['edit_wsfield'] = [
          'title' => t('Web service configurations'),
          'weight' => 50,
          'url' =>  Url::fromRoute("entity.field_config.{$entity->getTargetEntityTypeId()}_wsfield_edit_form", $route_parameters),
          'attributes' => ['title' => t('Edit web service configurations'), 'class' => array('dropbutton-action', 'web-service-config')],
        ];
      }
      return $operations;
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function wsdata_field_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'field_storage_config' && $entity->hasCustomStorage()) {
    // It's a field storage config that has a custom storage,
    $wsfield_config = entity_load('wsfield_config', $entity->get('field_name'));
    if ($wsfield_config != NULL) {
      // If there is a wsfield config we should delete it.
      $wsfield_config->delete();
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function wsdata_field_entity_load(array $entities, $entity_type_id) {
  if ('node' == $entity_type_id) {
    foreach ($entities as $entity) {
      // Fetch the field definitions for the this node.
      $fields = $entity->getFieldDefinitions();
      foreach ($fields as $field) {
        // Get the fields storage definitions.
        $field_storage = $field->getFieldStorageDefinition();
        // Check if it has the custom storage flag set to true.
        if ($field_storage->hasCustomStorage()) {
          // Check to make sure the object is of type FieldStorageConfig.
          if (is_a($field_storage, 'Drupal\field\Entity\FieldStorageConfig')) {
            // Fetch the wsfield config entity.
            $wsfield_config = entity_load('wsfield_config', $field_storage->get('field_name'));
            if ($wsfield_config != NULL) {
              // If the wsfield config exist we are in business replace the value with the return of the wscall.

              // TODO: Sort out the replacement patterns issue.
              $replacements = [];

              $wsdata  = \Drupal::service('wsdata');
              $result = $wsdata->call($wsfield_config->wscall, NULL, $replacements);

              // TODO: Need to figure out a good way to travers the result set.
              $tokens = explode(':', $wsfield_config->returnToken);
              $result_token = _wsdata_field_traverse_result($result, $tokens);

              // Set the entity fields value with the result value.
              $entity->set($field_storage->get('field_name'), $result_token);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function wsdata_field_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (preg_match('/^node_(.*)_edit_form/', $form_id)) {
    $entity = $form_state->getFormObject()->getEntity();
    $fields = $entity->getFieldDefinitions();
    foreach ($fields as $field) {
      // Get the fields storage definitions.
      $field_storage = $field->getFieldStorageDefinition();
      // Check if it has the custom storage flag set to true.
      if ($field_storage->hasCustomStorage()) {
        // Check to make sure the object is of type FieldStorageConfig.
        if (is_a($field_storage, 'Drupal\field\Entity\FieldStorageConfig')) {
          // Fetch the wsfield config entity.
          $wsfield_config = entity_load('wsfield_config', $field_storage->get('field_name'));
          if ($wsfield_config != NULL) {
            // Make the field hidden by adding a class.
            $form[$field_storage->get('field_name')]['#attributes'] = array(
              'class' => 'hidden',
            );
          }
        }
      }
    }
  }
}

/**
 * Function to travers the result set to find the base element.
 * This function will recurse down to the last token if it exist.
 *
 * @param array $result The returned result from the service.
 * @param array $tokens array of tokens to search for.
 * @return mixed
 */
function _wsdata_field_traverse_result($result, $tokens) {
  if (isset($result[reset($tokens)])) {
    $new_token_list = array_shift(reset($tokens));
    if (empty($new_token_list)) {
      return $result[reset($tokens)];
    }
    else {
      $new_result = $result[reset($tokens)];
      return _wsdata_field_traverse_result($new_result, $new_token_list);
    }
  }
  else {
    return '';
  }
}
