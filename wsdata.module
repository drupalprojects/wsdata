<?php

/**
 * @file
 * Main module for wsconfig
 */

/**
 * Class definition for Web Service data parser
 */
abstract class WsData {
  // Storage for parsed data
  public $data;
  
  // Storage for error information
  protected $error;
  
  // Return any error messages or error data
  public function getError() {
    return $error;
  }
  
/**
 * Retrieve the value for the given data key.
 *
 * This function retrieves data from the structured array in $this->data
 *  using $key as a key.  $key should be a string, with the character ':'
 *  delimiting the parts of the key.
 *  I.E.  The key  something:someplace with retrive $this->data['something']['someplace']
 *  N.B.  This function can be overridden to work with whatever the ->parse function
 *  is implemented to return. 
 */
  public function getData($key) {
    if (is_array($this->data)) {
      $return = $this->data;
      $location = explode(":", $key);
      foreach ($location as $l) {
        if (isset($return[$l])) {
          $return = $return[$l];
        }
        else {
          return FALSE;
        }
      }
      return $return;
    }
    return FALSE;
  }

  // load data
  public function addData($data) {
    $this->data = $this->parse($data);
  }

  // Returns an array of the content type of the data this processor accepts
  abstract public function accepts();

  // Parse the web service response string into a structured array and return the array
  abstract protected function parse($data);
}

/**
 * Class definition for Web Service Connector
 */
abstract class WsConnector {
  protected $endpoint;

  public function __construct($endpoint) {
    $this->endpoint = $endpoint;
  }

  abstract public function wscall($type, $method, $argument, $options);

  public function create( $method, $object, $options = array()) {
    return $this->wscall('create', $method, $object, $options);
  }

  public function read( $method, $id, $options = array()) {
    return $this->wscall('read', $method, $id, $options);
  }

  public function update ( $id, $method, $object, $options = array()) {
    return $this->wscall('update', $method, array( $id, $object), $options);
  }

  public function delete ( $id, $method, $options = array()) {
    return $this->wscall('delete', $method, $id, $options);
  }
}
